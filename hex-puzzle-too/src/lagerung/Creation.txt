import React, {useContext} from 'react'
import GameContext from '../context/GameContext'

//import { nanoid } from 'nanoid'

import {useMemo} from "react"

import  Loading from './Loading'

export let GRIDWIDTHCOUNT: number = 5
export let GRIDHEIGHTCOUNT: number = 5
export const GRIDCOUNT: number = GRIDHEIGHTCOUNT * GRIDWIDTHCOUNT

export const RADIUS: number = 1.0
export const HEXWIDTH: number = 2.0 * RADIUS
export const HEXHEIGHT: number = Math.sqrt(3) * RADIUS
export const HORIZONTAL_SPACING: number = HEXWIDTH * 3.0 / 4.0
export const VERTICAL_SPACING: number = HEXHEIGHT

export const GRIDWIDTH: number = (GRIDWIDTHCOUNT -1) * HORIZONTAL_SPACING + HEXWIDTH
export const GRIDHEIGHT: number = GRIDHEIGHTCOUNT * HEXHEIGHT + HEXHEIGHT / 2.0

export const STARTING_HEX_COMPLETED = [0, 1, 11, 12, 132, 143]
export const STARTING_HEX_BASE = [0, 1, 11, 12, 132, 143]
export const STARTING_HEX_GROUND = [0, 1, 11, 12, 132, 143]

export const STARTING_TILE = 0


interface HexObject {
  tkey: number,
  gridX: number,
  gridY: number,
  status: string,
  posX: number,
  posY: number,
  posZ: number,
  neighbours: Array<number>,
  neighboursObject: any,
  neighboursCoord: any,
  isEdge: boolean,
  isCorner: boolean,
  isTop: boolean,
  isBottom: boolean,
  isLeft: boolean,
  isRight: boolean,
  verticalShiftDown: boolean,
}


const GRIDFORMS = {
  desktop : [2, 1],
  mobile : [1, 2],
  square : [1, 1]
}

const GRIDSIZES = {
  small : 8,
  medium : 15,
  large : 25
}


export default function Creation(props: any) {

  const {
    userID,
    gameStats,
    baseImgStats,
    baseImageString,
    baseImageFile,
    gridConstants,
    gridImgAbsolutes,
    currentConstellation,
    hexArray,
    hexTable
  } = useMemo(() => {


    //localStorage.setItem('playerName', props.playerName)
    //localStorage.setItem('fieldSize', props.fieldSize)
    //localStorage.setItem('fieldForm', props.fieldForm)
    //localStorage.setItem('imgWidth', props.imgWidth.toString())
    //localStorage.setItem('imgHeight', props.imgHeight.toString())
    //localStorage.setItem('baseImageFile', JSON.stringify(props.base64Image))



/*     const baseImageString = props.base64Image
    const baseImageFile = props.imgFile

    const userID: string = nanoid()
 */
/* 
    const gameStats = {
        score : 0,
        level : 1,
        startingTile: 0,
        difficulty: props.difficulty,
      } */
  
    //localStorage.setItem('gameStats', JSON.stringify(gameStats))
  
   /*  let imgType: string = 'jpg'

    if(props.imgType.includes("png")){
        imgType = 'png'
    }

    const baseImgStats = {
      orgWidth : props.orgWidth,
      orgHeight : props.orgHeight,
      imgWidth : props.imgWidth,
      imgHeight : props.imgHeight,
      imgTop: props.imgTop,
      imgLeft: props.imgLeft,
      imgType: imgType,
    } */

    //localStorage.setItem('baseImgStats', JSON.stringify(baseImgStats))

    /* const GRIDWIDTHCOUNT = GRIDFORMS[props.fieldForm][0] * GRIDSIZES[props.fieldSize]
    const GRIDHEIGHTCOUNT = GRIDFORMS[props.fieldForm][1] * GRIDSIZES[props.fieldSize]
    const GRIDCOUNT = GRIDWIDTHCOUNT * GRIDWIDTHCOUNT

    
    const gridConstants = {
        fieldSize: props.fieldSize,
        fieldForm: props.fieldForm,
        gridWidthCount : GRIDWIDTHCOUNT,
        gridHeightCount : GRIDHEIGHTCOUNT,
        gridCount: GRIDCOUNT,

        hexWidth : HEXWIDTH,
        hexHeight:  HEXHEIGHT,
        hexRadius : RADIUS,
        hexHorizontalSpacing: HORIZONTAL_SPACING,
        hexVerticalSpacing: VERTICAL_SPACING,
        gridWidth: (GRIDWIDTHCOUNT - 1) * HORIZONTAL_SPACING + HEXWIDTH,
        gridHeight: Math.floor(GRIDHEIGHTCOUNT * HEXHEIGHT + HEXHEIGHT / 2.0),
    } */
  
    //localStorage.setItem('gridConstants', JSON.stringify(gridConstants))
  
    /* const gridImgAbsolutes = {
        hexWidthAbsolute: Math.floor(baseImgStats.imgWidth / gridConstants.gridWidthCount),
        hexRadiusAbsolute: Math.floor(baseImgStats.imgWidth / gridConstants.gridWidthCount) / 2,
        hexHeightAbsolute: Math.floor(Math.floor(baseImgStats.imgHeight / gridConstants.gridHeightCount) / 2.0 * Math.sqrt(3)),

        gridWidthAbsolute:  gridConstants.gridWidthCount * Math.floor(baseImgStats.imgWidth / gridConstants.gridWidthCount),
        gridHeightAbsolute:  gridConstants.gridHeightCount * Math.floor(Math.floor(baseImgStats.imgHeight / gridConstants.gridHeightCount) / 2.0 * Math.sqrt(3)),
    } */
  
    //localStorage.setItem('gridImgAbsolutes', JSON.stringify(gridImgAbsolutes))
  
    /* const islandTiles = [Math.floor(gridConstants.gridCount * Math.random()), Math.floor(gridConstants.gridCount * Math.random()), Math.floor(gridConstants.gridCount * Math.random())]

    const currentConstellation = {
        currentTile: STARTING_TILE,
        neighboursToCurrent: [STARTING_TILE + 1, STARTING_TILE + gridConstants.gridHeightCount, ],

        currentHexComplete: [STARTING_TILE, ].concat(islandTiles),
        currentHexBase: [STARTING_TILE, ].concat(islandTiles),
        currentHexGround: [STARTING_TILE, STARTING_TILE + 1, STARTING_TILE + gridConstants.gridHeightCount, ].concat(islandTiles),
    }
 */
    //localStorage.setItem('currentConstellation', JSON.stringify(currentConstellation))
  

    const hexArray: Array<HexObject> = [...Array(gridConstants.gridCount).keys()].map(i => {
        
        const x = Math.floor(i / gridConstants.gridHeightCount)
        const y = i % gridConstants.gridHeightCount

        const posX = gridConstants.hexRadius + x * gridConstants.hexHorizontalSpacing
        const verticalShiftDown = (x % 2) == 0
        const verticalShift = (verticalShiftDown)? 0: gridConstants.hexVerticalSpacing / 2.0
        const posZ = gridConstants.hexRadius + y * gridConstants.hexVerticalSpacing + verticalShift
        const isTop = y === 0
        const isBottom = y === (gridConstants.gridHeightCount - 1)
        const isLeft = x === 0
        const isRight = x === (gridConstants.gridWidthCount - 1)
        const isEdge = (isTop || isLeft || isBottom || isRight)
        const isCorner = (isTop && isLeft) || (isTop && isRight) || (isBottom && isLeft) || (isBottom && isRight)

        return {
          tkey: i,
          gridX: x,
          gridY: y,
          posX: posX,
          posY: 0,
          posZ: posZ,
          neighbours: [],
          neighboursCoord: {},
          neighboursObject: {},
          isEdge: isEdge,
          isCorner: isCorner,
          isLeft: isLeft,
          isRight: isRight,
          isTop: isTop,
          isBottom: isBottom,
          verticalShiftDown: verticalShiftDown
        }
    })


    const hexTable = new Map<number, HexObject>()
    
    hexArray.forEach((hex, index) => {
      hexTable.set(index, hex)
    })

    hexArray.forEach((hex, index) => {
      if(!hex.verticalShiftDown){
          
          hex.neighboursCoord = {
              'north': (!hex.isTop)? [hex.gridX, hex.gridY - 1] : null, 
              'south': (!hex.isBottom)? [hex.gridX, hex.gridY + 1]: null, 
              'northeast': (!hex.isRight)? [hex.gridX + 1, hex.gridY] : null,
              'southeast': !(hex.isBottom || hex.isRight)? [hex.gridX + 1, hex.gridY + 1]: null, 
              'northwest' : !(hex.isLeft)? [hex.gridX -1, hex.gridY]: null, 
              'southwest' : !(hex.isLeft || hex.isBottom)? [hex.gridX -1, hex.gridY + 1]: null,
          }

          hex.neighboursObject = {
            'north': (hex.neighboursCoord.north)? index - 1: null, 
            'south': (hex.neighboursCoord.south)? index + 1 : null, 
            'northeast': (hex.neighboursCoord.northeast)? index + gridConstants.gridHeightCount : null, 
            'southeast' : (hex.neighboursCoord.southeast)? index + gridConstants.gridHeightCount + 1 : null, 
            'northwest' : (hex.neighboursCoord.northwest)? index - gridConstants.gridHeightCount : null, 
            'southwest' : (hex.neighboursCoord.southwest)? index - gridConstants.gridHeightCount + 1 : null,
          }

          if(hex.neighboursCoord.north){
            hex.neighbours.push(index-1)
          }

          if(hex.neighboursCoord.south){
            hex.neighbours.push(index+1)
          }

          if(hex.neighboursCoord.northeast){
            hex.neighbours.push(index + gridConstants.gridHeightCount,)
          }

          if(hex.neighboursCoord.northwest){
            hex.neighbours.push(index - gridConstants.gridHeightCount)
          }

          if(hex.neighboursCoord.southeast){
            hex.neighbours.push(index + gridConstants.gridHeightCount + 1)
          }

          if(hex.neighboursCoord.southwest){
            hex.neighbours.push(index - gridConstants.gridHeightCount + 1)
          }

          
        
      } else {

        hex.neighboursCoord = {
          'north': (!hex.isTop)? [hex.gridX, hex.gridY - 1] : null, 
          'south': (!hex.isBottom)? [hex.gridX, hex.gridY + 1]: null, 
          'northeast': !(hex.isRight || hex.isTop)? [hex.gridX + 1, hex.gridY -1] : null,
          'southeast': (!hex.isRight)? [hex.gridX + 1, hex.gridY]: null, 
          'northwest' : !(hex.isLeft || hex.isTop)? [hex.gridX -1, hex.gridY-1]: null, 
          'southwest' : (!hex.isLeft)? [hex.gridX -1, hex.gridY]: null,
      }

      hex.neighboursObject = {
        'north': (hex.neighboursCoord.north)? index - 1: null, 
        'south': (hex.neighboursCoord.south)? index + 1 : null, 
        'northeast': (hex.neighboursCoord.northeast)? index + gridConstants.gridHeightCount - 1 : null, 
        'southeast' : (hex.neighboursCoord.southeast)? index + gridConstants.gridHeightCount : null, 
        'northwest' : (hex.neighboursCoord.northwest)? index - gridConstants.gridHeightCount -1 : null, 
        'southwest' : (hex.neighboursCoord.southwest)? index - gridConstants.gridHeightCount : null,
      }

      if(hex.neighboursCoord.north){
        hex.neighbours.push(index-1)
      }

      if(hex.neighboursCoord.south){
        hex.neighbours.push(index+1)
      }

      if(hex.neighboursCoord.northeast){
        hex.neighbours.push(index + gridConstants.gridHeightCount -1,)
      }

      if(hex.neighboursCoord.northwest){
        hex.neighbours.push(index - gridConstants.gridHeightCount -1)
      }

      if(hex.neighboursCoord.southeast){
        hex.neighbours.push(index + gridConstants.gridHeightCount)
      }

      if(hex.neighboursCoord.southwest){
        hex.neighbours.push(index - gridConstants.gridHeightCount)
      }

    }})


    currentConstellation.neighboursToCurrent = hexTable.get(currentConstellation.currentTile).neighbours
    hexArray.forEach((hex, index) => {
      const isCurrent = (index === currentConstellation.currentTile)? true: false
      const isNeighbour = currentConstellation.neighboursToCurrent.includes(index)? true : false 
      const status = isCurrent? "current" : (isNeighbour? "neighbour":"regular")
      hex.status = status
    })

    ////


    return {
      userID,
      gameStats,
      baseImgStats,
      baseImageString,
      baseImageFile,
      gridConstants,
      gridImgAbsolutes,
      currentConstellation,
      hexArray,
      hexTable,
    }
  }, [])



  return (

    <Loading 
        {...props}
        userID={userID}
        gameStats={gameStats}
        baseImgStats={baseImgStats}
        baseImageFile={baseImageFile}
        baseImageString={baseImageString}
        gridConstants={gridConstants}
        gridImgAbsolutes={gridImgAbsolutes}
        currentConstellation={currentConstellation}
        hexArray={hexArray}
        hexTable={hexTable}
    />

  )
    
    
  }
  
